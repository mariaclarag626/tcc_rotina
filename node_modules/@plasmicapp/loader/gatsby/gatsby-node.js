"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const upath_1 = __importDefault(require("upath"));
const logger = __importStar(require("../shared/logger"));
const shared_1 = require("../shared");
let config;
let watch = process.env.NODE_ENV === "development";
async function onGatsbyPreBootstrap(pluginOptions) {
    // This is passed by Gatsby, here we're deleting it to make sure
    // the plugin options only contains known keys.
    delete pluginOptions.plugins;
    const defaultDir = pluginOptions.dir || process.cwd();
    const plasmicDir = upath_1.default.join(defaultDir, ".cache", ".plasmic");
    if (pluginOptions.watch != null) {
        watch = pluginOptions.watch;
    }
    const defaultOptions = {
        initArgs: {
            platform: "gatsby",
            "pages-dir": "./pages",
            "images-public-dir": "../../../public",
            "src-dir": "./components",
        },
        projects: [],
        dir: defaultDir,
        watch,
        plasmicDir,
        pageDir: upath_1.default.join(defaultDir, "src", "pages"),
        substitutions: {},
    };
    config = await shared_1.convertOptsToLoaderConfig(pluginOptions, defaultOptions);
    return shared_1.initLoader(config);
}
let createPageParam = {};
async function onGatsbyPostBootstrap() {
    return shared_1.onPostInit(config, watch, async (pages) => {
        const existingPages = await createPageParam.graphql(`
      {
        allSitePage {
          edges {
            node {
              path
            }
          }
        }
      }`);
        const existingPagesMap = Object.fromEntries(existingPages.data.allSitePage.edges.map((page) => [
            page.node.path,
            true,
        ]));
        pages
            .filter((page) => !existingPagesMap[page.url] && !existingPagesMap[page.url + "/"])
            .forEach((page) => createPageParam.actions.createPage({
            path: page.url,
            component: page.path,
            context: {},
        }));
    });
}
exports.createPagesStatefully = (opts) => (createPageParam = opts);
exports.onPreBootstrap = (_, pluginOptions) => onGatsbyPreBootstrap(pluginOptions).catch((e) => logger.crash(e.message, e));
exports.onPostBootstrap = () => onGatsbyPostBootstrap().catch((e) => logger.crash(e.message, e));
