"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerSubstitutions = void 0;
const upath_1 = __importDefault(require("upath"));
const logger = __importStar(require("./logger"));
function substituteComponents(componentsDir, config, substitutions) {
    if (!substitutions) {
        return;
    }
    const componentsMap = Object.fromEntries(substitutions.map((elem) => [elem.name, elem]));
    const seenComponents = {};
    const markAsSeen = (name) => {
        if (seenComponents[name]) {
            logger.crash(`Component ${name} found in multiple projects. Please specify the project id!`);
        }
        seenComponents[name] = true;
    };
    config.projects.forEach((project) => {
        project.components.forEach((component) => {
            if (!componentsMap[component.name]) {
                return;
            }
            const { projectId, path: componentPath } = componentsMap[component.name];
            if (projectId && projectId !== project.projectId) {
                return;
            }
            if (!projectId) {
                markAsSeen(component.name);
            }
            component.importSpec.modulePath = upath_1.default.relative(componentsDir, upath_1.default.resolve(componentPath));
        });
    });
}
function registerSubstitutions(plasmicDir, config, substitutions) {
    const componentsDir = upath_1.default.join(plasmicDir, "components");
    substituteComponents(componentsDir, config, substitutions.components);
}
exports.registerSubstitutions = registerSubstitutions;
