declare type ComponentData = {
    name: string;
    projectId: string;
    path: string;
    type: string;
};
declare type PageData = ComponentData & {
    url: string;
    skeletonPath: string;
    isRegistered: boolean;
    type: "page";
};
declare type GenOptions = {
    dir: string;
    pageDir: string;
};
declare type ProviderData = ComponentData & {
    providerName?: string;
};
declare type ConfigData = {
    plasmicDir: string;
    componentData: Array<ComponentData | PageData>;
    componentDataKeyedByName: Record<string, (ComponentData | PageData)[]>;
    providerData: ProviderData[];
    providersKeyedByName: Record<string, ProviderData[]>;
};
export declare function getConfigData(opts: GenOptions): Promise<ConfigData>;
export declare function generateAll(opts: GenOptions): Promise<void>;
/**
 * This allows folks to import from "@plasmicapp/loader". Dynamic parts
 * should be kept outside, as node_modules may be cached (e.g by webpack).
 */
export declare function genStaticNodeModuleExports(plasmicDir: string): Promise<[void, void, void]>;
export {};
