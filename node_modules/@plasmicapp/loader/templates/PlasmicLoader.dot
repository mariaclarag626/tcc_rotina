
/** This file is auto-generated by Plasmic; please do not edit! */
import * as React from 'react';
export { PlasmicRootProvider } from '{{= it.plasmicDir}}/node_modules/@plasmicapp/react-web';

{{~ it.componentData :data}}
import {{=data.name}}{{=data.projectId}} from "{{=data.path}}";
{{~}}

/** This file is auto-generated by Plasmic; please do not edit! */
{{~ it.providerData :data}}
{{? data.providerName }}
import { {{=data.providerName}} as _GlobalVariant{{=data.name}}{{=data.projectId}} } from "{{=data.path}}";
{{??}}
import _GlobalVariant{{=data.name}}{{=data.projectId}} from "{{=data.path}}";
{{?}}
{{~}}

const componentsWithOneProject = {
  {{~ it.componentsWithOneProject :data}}
  "{{=data.name}}": {{=data.name}}{{=data.projectId}},
  {{~}}
};

const providersWithOneProject = {
  {{~ it.providersWithOneProject :data}}
  "{{=data.name}}": {
    "component": _GlobalVariant{{=data.name}}{{=data.projectId}},
    "isContext": !Boolean( "{{=data.providerName}}" ),
  },
  {{~}}
};

const componentMap = {
  {{~ it.componentMap :component}}
  "{{=component.name}}": {
    {{~ component.projects :project}}
    "{{=project.projectId}}": {{=component.name}}{{=project.projectId}},
    {{~}}
  },
  {{~}}
};

const providerMap = {
  {{~ it.providerMap :provider}}
  "{{=provider.name}}": {
    {{~ provider.projects :project}}
    "{{=project.projectId}}": {
      "component": _GlobalVariant{{=provider.name}}{{=project.projectId}},
      "isContext": !Boolean({{=provider.providerName}}),
    },
    {{~}}
  },
  {{~}}
};

const pagesByUrl = {
  {{~ it.pagesByUrl :page}}
    "{{=page.url}}": {name: "{{=page.name}}", projectId: "{{=page.projectId}}" },
  {{~}}
};

const unregisteredPagesByUrl = {
  {{~ it.unregisteredPagesByUrl :page}}
    "{{=page.url}}": {name: "{{=page.name}}", projectId: "{{=page.projectId}}" },
  {{~}}
};

/**
 * Return a list of pages that do not exist in the given
 * page directory.
 */
export function getUnregisteredPageUrls() {
  return Object.keys(unregisteredPagesByUrl);
}

/**
 * Return an array with all the URL paths that corresponds to Plasmic pages.
 *
 * There is also `getUnregisteredPageUrls` (the default, added later on) if
 * you want Plasmic to inspect your pages directory and return the pages
 * that are not registered.
 */
export function getPageUrls() {
  return Object.keys(pagesByUrl);
}

export function getComponentFromUrl(url) {
  if (Array.isArray(url)) {
    url = url.join("/");
  }
  if (!url.startsWith('/')) {
    url = '/' + url;
  }
  return pagesByUrl[url];
}

function getComponent(projectId, component) {
  if (componentsWithOneProject[component]) {
    return componentsWithOneProject[component];
  }
  if (!componentMap[component]) {
    throw new Error(`The component ${component} could not be found.`);
  }
  if (!componentMap[component][projectId]) {
    throw new Error(`The component ${component} requires a valid projectId. Passed: ${projectId}. Options: ${Object.keys(componentMap[component])}`);
  }
  return componentMap[component][projectId];
};

function renderWithProviders(component, projectId, providersWithProps) {
  const providers = Object.entries(providersWithProps || {}).map(([provider, value]) => {
    if (providersWithOneProject[provider]) {
      const {component, isContext} = providersWithOneProject[provider];
      return [isContext ? component.Provider :component, value];
    }
    if (!providerMap[provider]) {
      throw new Error(`The provider ${provider} could not be found.`);
    }
    if (!providerMap[provider][projectId]) {
      throw new Error(`The provider ${provider} requires a valid projectId. Passed: ${projectId}. Options: ${Object.keys(providerMap[provider])}`);
    }
    const {component, isContext} = providerMap[provider][projectId];
    return [isContext ? component.Provider : component, value];
  });

  if (!providers.length) {
    return component;
  }

  return providers.reduce((child, [wrapper, value]) => React.createElement(wrapper, {value}, child), component);
};

export function Providers({projectId, props = {}, children}) {
  return renderWithProviders(children, projectId, props);
}

/**
 * @deprecated This package is no longer supported. We recommend updating to new version of the Headless API. https://docs.plasmic.app/learn/upgrading-to-loader-v2
 */
export default function PlasmicLoader({ projectId, component, componentProps = {}, providerProps = {} }) {
  const Component = getComponent(projectId, component);
  console.warn("@plasmicapp/loader package is no longer supported. We recommend updating to new version of the Headless API. https://docs.plasmic.app/learn/upgrading-to-loader-v2");
  return renderWithProviders(React.createElement(Component, componentProps), projectId, providerProps);
};

PlasmicLoader.getPlumeType = function({ projectId, component }) {
  const Component = getComponent(projectId, component);
  return Component.__plumeType;
}
