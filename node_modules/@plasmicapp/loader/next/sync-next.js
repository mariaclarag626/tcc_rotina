"use strict";
/**
 * Next does not support any asynchronous workflow for plugins. This file is
 * meant to run as a fork, allowing us to retain asynchronous code for the
 * initial code syncing.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("../shared");
const logger = __importStar(require("../shared/logger"));
const cli = __importStar(require("../shared/cli"));
const upath_1 = __importDefault(require("upath"));
const utils_1 = require("../shared/utils");
const pages_1 = require("./pages");
async function run() {
    const opts = JSON.parse(process.argv[2]);
    const config = await shared_1.convertOptsToLoaderConfig(opts.pluginOptions, opts.defaultOptions);
    await shared_1.initLoader(config);
    await shared_1.maybeAddToGitIgnore(upath_1.default.join(process.cwd(), ".gitignore"), ".plasmic");
    const cliConfig = await cli.readConfig(config.plasmicDir);
    const pages = cli.getPagesFromConfig(config.plasmicDir, cliConfig);
    return pages_1.generateNextPages(pages, config.pageDir, cliConfig);
}
if (require.main === module) {
    utils_1.spawn(run().catch((e) => logger.crash(e.message, e)));
}
