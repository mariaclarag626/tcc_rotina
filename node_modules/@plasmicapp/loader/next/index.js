"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const child_process_1 = __importDefault(require("child_process"));
const upath_1 = __importDefault(require("upath"));
const shared_1 = require("../shared");
const logger = __importStar(require("../shared/logger"));
const utils_1 = require("../shared/utils");
const pages_1 = require("./pages");
// From: https://github.com/vercel/next.js/blob/canary/packages/next/next-server/lib/constants.ts.
const PHASE_PRODUCTION_BUILD = "phase-production-build";
const PHASE_DEVELOPMENT_SERVER = "phase-development-server";
const buildPhase = [PHASE_DEVELOPMENT_SERVER, PHASE_PRODUCTION_BUILD];
let isFirstTime = true;
function initPlasmicLoader(pluginOptions) {
    if (!isFirstTime) {
        return;
    }
    isFirstTime = false;
    const defaultDir = pluginOptions.dir || process.cwd();
    const plasmicDir = upath_1.default.join(defaultDir, ".plasmic");
    const defaultOptions = {
        initArgs: {
            platform: "nextjs",
            "pages-dir": "./pages",
            "images-public-dir": upath_1.default.join(process.cwd(), "public"),
            "src-dir": "./components",
        },
        dir: defaultDir,
        plasmicDir,
        projects: [],
        watch: process.env.NODE_ENV === "development",
        pageDir: upath_1.default.join(defaultDir, "pages"),
        substitutions: {},
    };
    const result = child_process_1.default.spawnSync("node", [
        upath_1.default.join(__dirname, "sync-next.js"),
        JSON.stringify({ pluginOptions, defaultOptions }),
    ], { stdio: "inherit" });
    // If it didn't succeed, there's likely an error that was logged. So we'll exit the process.
    if (result.status !== 0) {
        process.exit(1);
    }
    utils_1.spawn((async function () {
        const opts = await shared_1.convertOptsToLoaderConfig(pluginOptions, defaultOptions);
        if (opts.watch) {
            await shared_1.watchForChanges(opts, (pages, config) => pages_1.generateNextPages(pages, opts.pageDir, config));
        }
    })());
}
/**
 * @deprecated This package is no longer supported. We recommend updating to new version of the Headless API. https://docs.plasmic.app/learn/upgrading-to-loader-v2
 */
const plasmic = (pluginOptions) => (nextConfig = {}) => (phase) => {
    try {
        if (buildPhase.includes(phase)) {
            initPlasmicLoader(pluginOptions);
        }
        return nextConfig;
    }
    catch (e) {
        logger.crash(e.message, e);
        return nextConfig;
    }
};
module.exports = plasmic;
